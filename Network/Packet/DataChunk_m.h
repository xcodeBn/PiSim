//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Network/Packet/DataChunk.msg.
//

#ifndef __DATACHUNK_M_H
#define __DATACHUNK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class DataChunk;
#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include "inet/common/packet/chunk/FieldsChunk.h"
// }}

/**
 * Class generated from <tt>Network/Packet/DataChunk.msg:25</tt> by opp_msgtool.
 * <pre>
 * class DataChunk extends inet::FieldsChunk
 * {
 *     string data = "";
 *     int sourcePort = -1;
 *     int destinationPort = -1;
 *     string destinationAddress = "";
 *     bool shouldDiscard = false;
 *     bool isFinal = false;
 * 
 * }
 * </pre>
 */
class DataChunk : public ::inet::FieldsChunk
{
  protected:
    omnetpp::opp_string data = "";
    int sourcePort = -1;
    int destinationPort = -1;
    omnetpp::opp_string destinationAddress = "";
    bool shouldDiscard = false;
    bool isFinal_ = false;

  private:
    void copy(const DataChunk& other);

  protected:
    bool operator==(const DataChunk&) = delete;

  public:
    DataChunk();
    DataChunk(const DataChunk& other);
    virtual ~DataChunk();
    DataChunk& operator=(const DataChunk& other);
    virtual DataChunk *dup() const override {return new DataChunk(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getData() const;
    virtual void setData(const char * data);

    virtual int getSourcePort() const;
    virtual void setSourcePort(int sourcePort);

    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);

    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);

    virtual bool getShouldDiscard() const;
    virtual void setShouldDiscard(bool shouldDiscard);

    virtual bool isFinal() const;
    virtual void setIsFinal(bool isFinal);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataChunk& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataChunk& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline DataChunk *fromAnyPtr(any_ptr ptr) { return check_and_cast<DataChunk*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DATACHUNK_M_H

