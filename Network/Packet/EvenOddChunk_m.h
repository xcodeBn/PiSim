//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Network/Packet/EvenOddChunk.msg.
//

#ifndef __EVENODDCHUNK_M_H
#define __EVENODDCHUNK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class EvenOddChunk;
#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include "inet/common/packet/chunk/FieldsChunk.h"
// }}

/**
 * Class generated from <tt>Network/Packet/EvenOddChunk.msg:9</tt> by opp_msgtool.
 * <pre>
 * class EvenOddChunk extends inet::FieldsChunk
 * {
 *     string data = "";
 *     bool isEven = false;
 *     bool useJson = false;
 *     bool finalOdd = false;
 *     string extraData = "";
 *     string details = "";
 * 
 * }
 * </pre>
 */
class EvenOddChunk : public ::inet::FieldsChunk
{
  protected:
    omnetpp::opp_string data = "";
    bool isEven_ = false;
    bool useJson = false;
    bool finalOdd = false;
    omnetpp::opp_string extraData = "";
    omnetpp::opp_string details = "";

  private:
    void copy(const EvenOddChunk& other);

  protected:
    bool operator==(const EvenOddChunk&) = delete;

  public:
    EvenOddChunk();
    EvenOddChunk(const EvenOddChunk& other);
    virtual ~EvenOddChunk();
    EvenOddChunk& operator=(const EvenOddChunk& other);
    virtual EvenOddChunk *dup() const override {return new EvenOddChunk(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getData() const;
    virtual void setData(const char * data);

    virtual bool isEven() const;
    virtual void setIsEven(bool isEven);

    virtual bool getUseJson() const;
    virtual void setUseJson(bool useJson);

    virtual bool getFinalOdd() const;
    virtual void setFinalOdd(bool finalOdd);

    virtual const char * getExtraData() const;
    virtual void setExtraData(const char * extraData);

    virtual const char * getDetails() const;
    virtual void setDetails(const char * details);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EvenOddChunk& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EvenOddChunk& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline EvenOddChunk *fromAnyPtr(any_ptr ptr) { return check_and_cast<EvenOddChunk*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __EVENODDCHUNK_M_H

