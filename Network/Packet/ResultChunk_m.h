//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Network/Packet/ResultChunk.msg.
//

#ifndef __RESULTCHUNK_M_H
#define __RESULTCHUNK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ResultChunk;
#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include "inet/common/packet/chunk/FieldsChunk.h"
// }}

/**
 * Class generated from <tt>Network/Packet/ResultChunk.msg:22</tt> by opp_msgtool.
 * <pre>
 * class ResultChunk extends inet::FieldsChunk
 * {
 *     string resultData = "";
 *     int sourcePort = -1;
 *     int destinationPort = -1;
 *     string distinationAdresses = "";
 * }
 * </pre>
 */
class ResultChunk : public ::inet::FieldsChunk
{
  protected:
    omnetpp::opp_string resultData = "";
    int sourcePort = -1;
    int destinationPort = -1;
    omnetpp::opp_string distinationAdresses = "";

  private:
    void copy(const ResultChunk& other);

  protected:
    bool operator==(const ResultChunk&) = delete;

  public:
    ResultChunk();
    ResultChunk(const ResultChunk& other);
    virtual ~ResultChunk();
    ResultChunk& operator=(const ResultChunk& other);
    virtual ResultChunk *dup() const override {return new ResultChunk(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getResultData() const;
    virtual void setResultData(const char * resultData);

    virtual int getSourcePort() const;
    virtual void setSourcePort(int sourcePort);

    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);

    virtual const char * getDistinationAdresses() const;
    virtual void setDistinationAdresses(const char * distinationAdresses);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResultChunk& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResultChunk& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ResultChunk *fromAnyPtr(any_ptr ptr) { return check_and_cast<ResultChunk*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RESULTCHUNK_M_H

